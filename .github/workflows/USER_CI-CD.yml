name: application CI/CD Production Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # 사용할 이미지 레지스트리 및 이미지 이름 설정
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =====================
  # Job 1: Build & Test
  # =====================
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # GHCR에 패키지를 푸시하기 위한 권한

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # ========================
  # Job 2: Deploy to Server
  # ========================
  # deploy:
  #   # build 작업이 성공해야만 deploy 작업 실행
  #   needs: build
  #   # main 브랜치에 push 이벤트가 발생했을 때만 실행
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Deploy to Production Server
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.SERVER_HOST }}
  #         username: ${{ secrets.SERVER_USERNAME }}
  #         key: ${{ secrets.SERVER_SSH_KEY }}
  #         port: ${{ secrets.SERVER_PORT }}
  #         script: |
  #           # Docker Hub가 아닌 GHCR에서 이미지 pull
  #           docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_TOKEN }}
  #           docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  #           # 기존 컨테이너 중지 및 삭제
  #           docker stop ${{ secrets.CONTAINER_NAME }} || true
  #           docker rm ${{ secrets.CONTAINER_NAME }} || true

  #           # 새 컨테이너 실행 (환경 변수 주입)
  #           docker run -d \
  #             --name ${{ secrets.CONTAINER_NAME }} \
  #             -p ${{ secrets.SERVICE_PORT }}:${{ secrets.SERVICE_PORT }} \
  #             -e SERVER_PORT=${{ secrets.SERVICE_PORT }} \
  #             -e SPRING_PROFILES_ACTIVE=prod \
  #             -e DB_URL=${{ secrets.DB_URL }} \
  #             -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
  #             -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
  #             ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
  #           # 사용하지 않는 이미지 정리
  #           docker image prune -f